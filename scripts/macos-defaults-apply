#!/usr/bin/env bash
#
# macos-defaults
#
# An interactive wizard for setting macOS user defaults. It can be run in
# interactive, apply-all, or dry-run mode, and only applies settings that
# differ from the current configuration. A safe way to configure a new macOS
# system or enforce a consistent setup.

# Sets sensible macOS defaults, interactively.
# Inspired by Mathias Bynens's .macos script: https://github.com/mathiasbynens/dotfiles

set -euo pipefail
cd "$(dirname "$0")"

# --- Wizard State & Helpers ---

MODE="interactive"
APPLY_ALL=false
CHANGES_MADE=false
AFFECTED_APPS=()

# Colors
C_RESET=$'\033[0m'; C_INFO=$'\033[1;34m'; C_SUCCESS=$'\033[1;32m'; C_WARN=$'\033[1;33m'; C_ARROW=$'\033[1;34m';

normalize_path() {
  if [[ "$1" == '~'* ]]; then
    echo "$HOME${1#\~}"
  else
    echo "$1"
  fi
}

prompt_user() {
  local description=$1 current_value=$2 new_value=$3

  if ! $APPLY_ALL && [[ "$MODE" == "interactive" ]]; then
    echo
    printf "${C_WARN}⚠️ Change needed for '%s'${C_RESET}\n" "$description"
    printf "  ${C_ARROW}Current:${C_RESET} %s\n" "$current_value"
    printf "  ${C_ARROW}New:${C_RESET}     %s\n" "$new_value"
    read -p "Apply this change? [y/n/a/q] (y): " -n 1 -r action
    echo

    case "$action" in
      [nN]) return 1 ;;
      [qQ]) echo "Exiting."; exit 0 ;;
      [aA]) APPLY_ALL=true; printf "%s› Applying all subsequent changes.%s\n" "${C_INFO}" "${C_RESET}" ;;
    esac
  fi
  return 0
}

run() {
  local description=$1; shift
  if [[ "$MODE" == "dry_run" ]]; then
    printf "${C_WARN}[dry-run] Would run: %s${C_RESET}\n" "$*"
    return
  fi
  if prompt_user "$description" "N/A (command)" "Run command"; then
    printf "${C_INFO}› %s${C_RESET}\n" "$description"
    "$@"
  else
    printf "${C_INFO}› Skipping '%s'${C_RESET}\n" "$description"
  fi
}

set_default() {
  local description=$1 domain=$2 key=$3 type=$4 value=$5

  # Skip known sandboxed domains
  if [[ "$domain" == "com.apple.mail" || "$domain" == "com.apple.Safari" ]]; then
    printf "${C_WARN}⚠️  Skipping '%s' — sandboxed domain can't be modified via defaults.${C_RESET}\n" "$description"
    return
  fi

  local current_value
  current_value=$(defaults read "$domain" "$key" 2>/dev/null || echo "NOT_SET")

  # Normalize strings that may contain ~
  if [[ "$type" == "-string" ]]; then
    value=$(normalize_path "$value")
    current_value=$(normalize_path "$current_value")
  fi

  # Type-aware comparison
  local is_correct=false
  if [[ "$type" == "-bool" ]]; then
    if [[ "$value" == "true" && "$current_value" =~ ^(1|true)$ ]]; then is_correct=true;
    elif [[ "$value" == "false" && "$current_value" =~ ^(0|false)$ ]]; then is_correct=true; fi
  elif [[ "$current_value" == "$value" ]]; then
    is_correct=true
  fi

  if $is_correct; then
    printf "${C_SUCCESS}✅ Skipping '%s' (already set)${C_RESET}\n" "$description"
    return
  fi

  CHANGES_MADE=true

  if [[ "$MODE" == "dry_run" ]]; then
    printf "${C_WARN}[dry-run] '%s'${C_RESET}\n" "$description"
    printf "  ${C_ARROW}Current:${C_RESET} %s\n" "$current_value"
    printf "  ${C_ARROW}New:${C_RESET}     %s\n" "$value"
    return
  fi

  if prompt_user "$description" "$current_value" "$value"; then
    printf "${C_INFO}› Applying '%s'${C_RESET}\n" "$description"
    defaults write "$domain" "$key" "$type" "$value"
  else
    printf "${C_INFO}› Skipping '%s'${C_RESET}\n" "$description"
  fi
}

# --- Main Execution ---

clear
printf "%smacOS Defaults Wizard%s\n" "${C_INFO}" "${C_RESET}"
echo "Choose how to proceed:"
echo "  (I)nteractive: Review each change (default)"
echo "  (A)pply all: Apply all needed changes without prompting"
echo "  (D)ry-run: Show what would change without applying anything"
echo "  (Q)uit"
read -p "Your choice [I/a/d/q]: " -r choice
echo
choice="${choice:-i}"

case "$choice" in
  [aA]*) MODE="apply_all"; printf "%s› Mode: Apply All%s\n" "${C_INFO}" "${C_RESET}" ;;
  [dD]*) MODE="dry_run";  printf "%s› Mode: Dry-Run%s\n" "${C_INFO}" "${C_RESET}" ;;
  [qQ]*) echo "Exiting."; exit 0 ;;
  *)     MODE="interactive"; printf "%s› Mode: Interactive%s\n" "${C_INFO}" "${C_RESET}" ;;
esac

osascript -e 'tell application "System Preferences" to quit' 2>/dev/null || true

#region General UI/UX
set_default "Expand save panel by default" NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
set_default "Expand print panel by default" NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
#endregion

#region Finder
set_default "Show all hidden files" com.apple.finder AppleShowAllFiles -bool true
set_default "Show all file extensions" NSGlobalDomain AppleShowAllExtensions -bool true
set_default "Show status bar" com.apple.finder ShowStatusBar -bool true
set_default "Show path bar" com.apple.finder ShowPathbar -bool true
set_default "Disable warning on extension change" com.apple.finder FXEnableExtensionChangeWarning -bool false
set_default "Avoid .DS_Store on network volumes" com.apple.desktopservices DSDontWriteNetworkStores -bool true
set_default "Avoid .DS_Store on USB volumes" com.apple.desktopservices DSDontWriteUSBStores -bool true
run "Make ~/Library visible" chflags nohidden "$HOME/Library"
AFFECTED_APPS+=("Finder")
#endregion

#region Dock
set_default "Enable Dock auto-hiding" com.apple.dock autohide -bool true
set_default "Set auto-hide delay to zero" com.apple.dock autohide-delay -float 0
set_default "Set animation speed to zero" com.apple.dock autohide-time-modifier -float 0
set_default "Set icon size" com.apple.dock tilesize -int 27
set_default "Enable magnification" com.apple.dock magnification -bool true
set_default "Set magnification icon size" com.apple.dock largesize -int 72
AFFECTED_APPS+=("Dock")
#endregion

#region Keyboard
set_default "Disable press-and-hold for keys" NSGlobalDomain ApplePressAndHoldEnabled -bool false
set_default "Set a fast key repeat rate" NSGlobalDomain KeyRepeat -int 1
set_default "Set a short delay until key repeat" NSGlobalDomain InitialKeyRepeat -int 15
#endregion

#region Screen
run "Ensure screenshot directory exists" mkdir -p "${HOME}/Desktop/Screenshots"
set_default "Set screenshot location" com.apple.screencapture location -string "${HOME}/Desktop/Screenshots"
set_default "Disable shadow in screenshots" com.apple.screencapture disable-shadow -bool true
set_default "Require password immediately after sleep/saver" com.apple.screensaver askForPassword -int 1
set_default "Set password delay to 0" com.apple.screensaver askForPasswordDelay -int 0
AFFECTED_APPS+=("SystemUIServer")
#endregion

#region Input Devices
set_default "Disable 'natural' scrolling" NSGlobalDomain com.apple.swipescrolldirection -bool false
set_default "Enable tap to click" com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
set_default "Enable tap to click (current user)" com.apple.AppleMultitouchTrackpad Clicking -bool true
set_default "Enable three-finger drag" com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true
set_default "Set mouse scaling" NSGlobalDomain com.apple.mouse.scaling -float 3
#endregion

#region App-Specific Settings
set_default "VSCode: Disable press-and-hold" com.microsoft.VSCode ApplePressAndHoldEnabled -bool false
set_default "Finder: Enable text selection in Quick Look" com.apple.finder QLEnableTextSelection -bool true
set_default "Safari: Enable the Develop menu" com.apple.Safari IncludeDevelopMenu -bool true
set_default "Safari: Enable WebKit developer extras" com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
AFFECTED_APPS+=("Safari" "Finder")
#endregion

if ! $CHANGES_MADE && [[ "$MODE" != "dry_run" ]]; then
  printf "%s\n✅ All settings are already up to date!%s\n" "${C_SUCCESS}" "${C_RESET}"
  exit 0
fi

#region Kill affected applications
if [[ "$MODE" != "dry_run" ]]; then
  unique_apps=$(echo "${AFFECTED_APPS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
  if [[ -n "$unique_apps" ]]; then
    echo
    printf "%s› The following apps should be restarted to apply changes:%s\n" "${C_INFO}" "${C_RESET}"
    for app in $unique_apps; do echo "  - $app"; done

    read -p "Restart them now? [y/n] (y): " -n 1 -r restart_choice
    echo
    if [[ ! "$restart_choice" =~ ^[Nn]$ ]]; then
      for app in $unique_apps; do
        killall "${app}" &> /dev/null || true
      done
      printf "%sAffected apps restarted.%s\n" "${C_SUCCESS}" "${C_RESET}"
    fi
  fi
fi
#endregion

printf "%s\n✅ macOS defaults wizard complete. Some changes may require a full logout/restart.%s\n" "${C_SUCCESS}" "${C_RESET}"
