#!/bin/bash
set -euo pipefail

# ==========================================================
# Script: todo
# Description: Main entry point for the todo script.
#              Handles argument parsing and command routing.
# ==========================================================

# --- Setup ---
# Find the directory of the current script, source functions and config.
SOURCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=todo.functions.sh
. "$SOURCE_DIR/todo.functions.sh"

# Load configuration and check dependencies.
_config
_check_dependencies

# --- Argument Parsing ---
COMMAND=""
VERBOSE_FLAG="false"
TODO_ITEMS=()

# Parse options
while getopts ":v" opt; do
    case ${opt} in
        v)
            VERBOSE_FLAG="true"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            show_help
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

# The first non-option argument is the command.
if [ $# -gt 0 ]; then
    COMMAND="$1"
    shift
fi

# The rest are todo items.
if [ $# -gt 0 ]; then
    TODO_ITEMS+=("$@")
fi

# Also read from stdin.
if [ -p /dev/stdin ]; then
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            TODO_ITEMS+=("$line")
        fi
    done
fi

# --- Main Logic ---
# Get the current date and note path for all commands.
DATE=$(date +%Y-%m-%d)
NOTE_PATH="$NOTE_DIR/$DATE.md"

# Create notes directory if it doesn't exist.
if [ ! -d "$NOTE_DIR" ]; then
    _verbose_echo "Creating notes directory: $NOTE_DIR"
    mkdir -p "$NOTE_DIR"
fi

# --- Command Routing ---
# If no command is given, decide what to do.
if [ -z "$COMMAND" ]; then
    if [ ${#TODO_ITEMS[@]} -gt 0 ]; then
        COMMAND="add"
    else
        # If no command and no items, show interactive menu.
        if [ "$FZF_INSTALLED" = true ]; then
            interactive_mode
        else
            _verbose_echo "fzf not found, which is required for interactive mode."
            show_help
        fi
        exit_gracefully
    fi
fi

# Route to the appropriate function based on the command.
case "$COMMAND" in
    help)
        show_help
        ;;
    list)
        cmd_list "$@"
        ;;
    motd)
        cmd_motd
        ;;
    edit)
        cmd_edit
        ;;
    note)
        cmd_note
        ;;
    add)
        cmd_add
        ;;
    meta)
        cmd_meta "$@"
        ;;
    filter)
        cmd_filter
        ;;
    *)
        echo "Error: Unknown command '$COMMAND'" >&2
        show_help
        exit 1
        ;;
esac

exit_gracefully
